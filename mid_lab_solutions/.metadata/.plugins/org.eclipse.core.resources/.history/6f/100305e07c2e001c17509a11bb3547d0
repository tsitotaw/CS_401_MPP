package genericmethods;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class Contains {

	public static void main(String[] args) {
		List<String> list = Arrays.asList("Bob", "Joe", "Tom");
		List<Object> olist = Arrays.asList("Bob", 1, "true");
		List<Person> plist = Arrays.asList(new Person("Tamirat"), new Person("Fisseha"), new Person("Soli"));
		System.out.println(contains1(list, "Joe"));				
		System.out.println(contains1(olist, 1));				
		System.out.println(contains1(plist, new Person("Fisseha")));				

	}
	
	public static <T> boolean contains1(List<T> list, T s) {
	
		for(T x : list) {
			if(x == null && s == null) return true;
			if(s == null || x == null) continue;
			
			if(x.equals(s)) return true;
		}
		
		return false;
	}

}

class Person {
	private String name;
	
	public Person(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public int hashCode() {
		return Objects.hash(name);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		return Objects.equals(name, other.name);
	}
	
	
	
}
