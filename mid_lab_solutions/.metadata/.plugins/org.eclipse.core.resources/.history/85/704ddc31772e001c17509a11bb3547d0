package wildcardhelper;

import java.util.Arrays;
import java.util.List;

/**
 * In some cases, the compiler infers the type of a wildcard. 
 * For example, a list may be defined as List<?> but, when evaluating an expression, 
 * the compiler infers a particular type from the code. 
 * This scenario is known as wildcard capture
 * 
 * For the most part, you don't need to worry about wildcard capture, 
 * except when you see an error message that contains the phrase "capture of".
 * 
 * @author tfisseha
 *
 */
public class UnBoundedWildcard {

	public static void main(String[] args) {
		List<Integer> ints = Arrays.asList(1,3,5,2,32);
		System.out.println(countList(ints));
		System.out.println(countListGenerics(Arrays.asList("String",'C',5,true,32)));
		System.out.println(sumList(ints));
	}
	
	private static int countList(List<Integer> list) {
		return list.size();
	}
	
	private static int countListGenerics(List<?> list) {
		return list.size();
	}
	
	private static int sumList(List<Integer> list) {
		int sum = 0;
		for(int ele: list) {
			sum +=ele;
		}
		return sum;
	}
//	private static <T> T sumListGenerics(List<?> list) {
//		int sum = 0;
//		for(T ele: list) {
//			sum +=ele;
//		}
//		return ele;
//	}

	void foo(List<?> i) {
        i.set(0, i.get(0));
    }
}
