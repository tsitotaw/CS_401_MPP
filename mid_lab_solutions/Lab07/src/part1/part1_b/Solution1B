The List.contains(...) method is defined to use equals(Object) to decide if the argument object is "contained" by the list. 
So, for complex objects, like Employee, in our case, we need to override equals ... 
assuming that the default implementation is not what you need.

This specification should not be construed to imply that invoking Collection.contains with a non-null argument o 
will cause o.equals(e) to be invoked for any element e. 
Implementations are free to implement optimizations whereby the equals invocation is avoided, 
for example, by first comparing the hash codes of the two elements. 
(The Object.hashCode() specification guarantees that two objects with unequal hash codes cannot be equal.) 
More generally, implementations of the various Collections Framework interfaces are free to take advantage of the 
specified behavior of underlying Object methods wherever the implementor deems it appropriate.

The equals method in Employee has
been incorrectly overridden. Therefore,
when the listsAreEqual method checks
the solution, it uses the original Object
implementation of equals, which gives
incorrect results here.