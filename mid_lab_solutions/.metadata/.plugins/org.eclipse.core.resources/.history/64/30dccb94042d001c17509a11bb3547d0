package intermediateoperations;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

public class sorted {
	public static void main(String[] args) {
		System.out.println(sortedByNaturalOrder());
		System.out.println(sortedByWordLength());
		System.out.println(sortedByWordLengthLambda());
		System.out.println(sortedByWordLengthMethodReference());
		System.out.println(sortedByWordLengthLambda2());
	}
	
	static List<String> sortedByNaturalOrder(){
		List<String> words = Arrays.asList("Tom", "Tamirat", "Abebe", "Molla");
		
		return words.stream()
				.sorted() // natural ordering
				.collect(Collectors.toList());
	}
	
	static List<String> sortedByWordLength(){
		List<String> words = Arrays.asList("Tom", "Tamirat", "Abebe", "Molla");
		
		return words.stream()
				.sorted(Comparator.comparing(String::length)) // natural ordering
				.collect(Collectors.toList());
	}
	
	static List<String> sortedByWordLengthLambda(){
		List<String> words = Arrays.asList("Tom", "Tamirat", "Abebe", "Molla");
		
		return words.stream()
				.sorted((w1,w2) -> (w1.length() > w2.length()) ? 1 : -1) 
				.collect(Collectors.toList());
	}
	
	static List<String> sortedByWordLengthMethodReference(){
		List<String> words = Arrays.asList("Tom", "Tamirat", "Abebe", "Molla");
		
		return words.stream()
				.sorted(Comparator.comparing(String::length))
				.collect(Collectors.toList());
	}
	
	static List<String> sortedByWordLengthLambda2(){
		List<String> words = Arrays.asList("Tom", "Tamirat", "Abebe", "Molla");
		Function<String, Integer> sortByLength = x -> x.length();
		
		return words.stream()
				.sorted(Comparator.comparing(sortByLength))
				.collect(Collectors.toList());
	}
	
	static List<Employee> sortedEmployeeByName(){
		List<Employee> emps = Arrays.asList(new Employee("Tom"), new Employee("Tamirat"), new Employee("Abebe"), new Employee("Molla"));
		Function<Employee, Integer> sortByNameLength = x -> x.getName().length();
		
		return emps.stream()
				.sorted(Comparator.comparing(sortByNameLength))
				.collect(Collectors.toList());
	}
	
}
